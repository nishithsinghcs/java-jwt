import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.crypto.SecretKey;
import java.util.Date;

public class TokenGenerator {

    private static final Logger logger = LoggerFactory.getLogger(TokenGenerator.class);
    private String secret;
    private long expDate; // expiry duration in minutes

    public TokenGenerator(String secret, long expDate) {
        this.secret = secret;
        this.expDate = expDate;
    }

    public String generateSecurityToken(String apiKey, String name) {
        logger.info("Inside Security Token Generation Method...");

        if (!name.equals(name) || !apiKey.equals(secret)) {
            return null;
        }

        SecretKey key = Keys.hmacShaKeyFor(secret.getBytes());

        Date now = new Date();
        Date expiryDate = new Date(now.getTime() + expDate * 60000); // convert minutes to milliseconds

        String token = Jwts.builder()
                .setSubject(name)
                .setIssuedAt(now)
                .setExpiration(expiryDate)
                .signWith(key, SignatureAlgorithm.HS256)
                .compact();

        logger.info("Generate Token Completed...");
        return token;
    }
}
